// Code generated by MockGen. DO NOT EDIT.
// Source: internal/elastic/elastic.go

// Package mock_elastic is a generated GoMock package.
package elastic

import (
	context "context"
	model "qualification/internal/usecase/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockES is a mock of ES interface.
type MockES struct {
	ctrl     *gomock.Controller
	recorder *MockESMockRecorder
}

// MockESMockRecorder is the mock recorder for MockES.
type MockESMockRecorder struct {
	mock *MockES
}

// NewMockES creates a new mock instance.
func NewMockES(ctrl *gomock.Controller) *MockES {
	mock := &MockES{ctrl: ctrl}
	mock.recorder = &MockESMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockES) EXPECT() *MockESMockRecorder {
	return m.recorder
}

// CreateProductIndex mocks base method.
func (m *MockES) CreateProductIndex(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductIndex", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductIndex indicates an expected call of CreateProductIndex.
func (mr *MockESMockRecorder) CreateProductIndex(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductIndex", reflect.TypeOf((*MockES)(nil).CreateProductIndex), ctx, product)
}

// SearchDoc mocks base method.
func (m *MockES) SearchDoc(ctx context.Context, productName string) []model.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDoc", ctx, productName)
	ret0, _ := ret[0].([]model.Product)
	return ret0
}

// SearchDoc indicates an expected call of SearchDoc.
func (mr *MockESMockRecorder) SearchDoc(ctx, productName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDoc", reflect.TypeOf((*MockES)(nil).SearchDoc), ctx, productName)
}
